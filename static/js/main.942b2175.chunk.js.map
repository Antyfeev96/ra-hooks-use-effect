{"version":3,"sources":["Components/Details/Details.jsx","Components/ListItem/ListItem.jsx","Components/List/List.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Details","props","console","log","avatar","name","details","city","company","position","className","src","alt","nanoid","ListItem","info","id","onClick","changeUser","List","useState","setLoading","setError","list","setList","timestampRef","useRef","useEffect","a","timestamp","Date","now","current","fetch","process","response","ok","Error","statusText","json","result","fetchList","map","item","App","setDetails","newUser","error","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2VAKe,SAASA,EAAQC,GAC9BC,QAAQC,IAAIF,GADyB,IAE7BG,EAAiBH,EAAjBG,OAAQC,EAASJ,EAATI,KAFqB,EAGDJ,EAAMK,QAAlCC,EAH6B,EAG7BA,KAAMC,EAHuB,EAGvBA,QAASC,EAHc,EAGdA,SACvB,OACE,sBAAKC,UAAU,UAAf,UACE,qBAAoBC,IAAKP,EAAQQ,IAAI,QAA3BC,eACV,qBAAKH,UAAU,gBAAf,SAAgCL,IAChC,sBAAKK,UAAU,gBAAf,mBAAsCH,KACtC,sBAAKG,UAAU,mBAAf,sBAA4CF,KAC5C,sBAAKE,UAAU,oBAAf,uBAA8CD,Q,YCXrC,SAASK,EAASb,GAC/B,IAAMc,EAAO,CACXC,GAAIf,EAAMe,GACVX,KAAMJ,EAAMI,MAEd,OACE,qBAAKK,UAAU,aAAaO,QAAS,kBAAMhB,EAAMiB,WAAWH,IAA5D,SAAoEd,EAAMI,OCJ/D,SAASc,EAAKlB,GAAQ,IAAD,EACFmB,oBAAS,GADP,mBAChBC,GADgB,aAELD,mBAAS,MAFJ,mBAEjBE,GAFiB,aAGVF,mBAAS,IAHC,mBAG3BG,EAH2B,KAGrBC,EAHqB,KAI5BC,EAAeC,mBA6BrB,OA3BAC,qBAAU,YACO,uCAAG,gCAAAC,EAAA,6DACVC,EAAYC,KAAKC,MACvBN,EAAaO,QAAUH,EACvBR,GAAW,GAHK,kBAKSY,MAAM,GAAD,OAAIC,sGAAJ,gBALd,WAKRC,EALQ,QAMAC,GANA,sBAON,IAAIC,MAAMF,EAASG,YAPb,UASVb,EAAaO,UAAYH,EATf,kCAUSM,EAASI,OAVlB,QAUNC,EAVM,OAWZtC,QAAQC,IAAI,mDACZqB,EAAQgB,GAZI,QAcdlB,EAAS,MAdK,kDAgBdA,EAAS,EAAD,IAhBM,yBAkBdD,GAAW,GAlBG,6EAAH,qDAqBfoB,KAGC,IAGD,qBAAK/B,UAAU,OAAf,SACGa,EAAKmB,KAAI,SAAAC,GAAI,OAAI,cAAC,EAAD,aAAyBzB,WAAYjB,EAAMiB,YAAgByB,GAA5C9B,oBCpCxB,SAAS+B,IAAO,IAAD,EACExB,mBAAS,CACrCJ,GAAI,KACJX,KAAM,OACND,OAAQ,4BACRE,QAAS,CACPC,KAAM,OACNC,QAAS,UACTC,SAAU,cARc,mBACrBH,EADqB,KACZuC,EADY,KAYtB3B,EAAU,uCAAG,WAAO4B,GAAP,iBAAAlB,EAAA,yDACbtB,EAAQU,KAAO8B,EAAQ9B,GADV,0EAGQiB,MAAM,GAAD,OAAIC,sGAAJ,YAAsCY,EAAQ9B,GAA9C,UAHb,WAGTmB,EAHS,QAIDC,GAJC,sBAKP,IAAIC,MAAMF,EAASG,YALZ,wBAOMH,EAASI,OAPf,QAOTC,EAPS,OAQftC,QAAQC,IAAI,4DACZ0C,EAAWL,GATI,kDAWftC,QAAQ6C,MAAR,MAXe,0DAAH,sDAehB,OACE,sBAAKrC,UAAU,MAAf,UACE,cAAC,EAAD,CAAMQ,WAAYA,IAClB,cAAC,EAAD,eAAaZ,OCnCnB,IAYe0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.942b2175.chunk.js","sourcesContent":["import './Details.scss';\r\nimport React from 'react'\r\nimport { nanoid } from 'nanoid';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Details(props) {\r\n  console.log(props);\r\n  const { avatar, name } = props;\r\n  const { city, company, position } = props.details;\r\n  return (\r\n    <div className=\"details\">\r\n      <img key={nanoid()} src={avatar} alt=\"User\" />\r\n      <div className=\"details__name\">{name}</div>\r\n      <div className=\"details__city\">city: {city}</div>\r\n      <div className=\"details__company\">company: {company}</div>\r\n      <div className=\"details__position\">position: {position}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nDetails.propTypes = {\r\n\r\n}","import './ListItem.scss';\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function ListItem(props) {\r\n  const info = {\r\n    id: props.id,\r\n    name: props.name\r\n  }\r\n  return (\r\n    <div className=\"list__item\" onClick={() => props.changeUser(info)}>{props.name}</div>\r\n  )\r\n}\r\n\r\nListItem.propTypes = {\r\n\r\n}\r\n\r\n","import './List.scss';\r\nimport React, { useEffect, useState, useRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { nanoid } from 'nanoid';\r\nimport ListItem from '../ListItem/ListItem';\r\n\r\nexport default function List(props) {\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [hasError, setError] = useState(null);\r\n  const [list, setList] = useState([]);\r\n  const timestampRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const fetchList = async () => {\r\n      const timestamp = Date.now();\r\n      timestampRef.current = timestamp;\r\n      setLoading(true);\r\n      try {\r\n        const response = await fetch(`${process.env.REACT_APP_NEWS_URL}/users.json`);\r\n        if (!response.ok) {\r\n          throw new Error(response.statusText);\r\n        }\r\n        if (timestampRef.current === timestamp) {\r\n          const result = await response.json();\r\n          console.log('List получен');\r\n          setList(result);\r\n        }\r\n        setError(null);\r\n      } catch (e) {\r\n        setError(e)\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n    fetchList();\r\n    // const timeoutId = setTimeout(async () => await fetchList(), 3000)\r\n    // return () => clearTimeout(timeoutId);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"list\">\r\n      {list.map(item => <ListItem key={nanoid()} changeUser={props.changeUser} {...item} />)}\r\n    </div>\r\n  )\r\n}\r\n\r\nList.propTypes = {\r\n\r\n}","import { useState, useEffect } from 'react';\nimport './App.scss';\nimport Details from './Components/Details/Details';\nimport List from './Components/List/List';\n\nexport default function App() {\n  const [details, setDetails] = useState({\n    id: null,\n    name: 'name',\n    avatar: 'https://i.pravatar.cc/300',\n    details: {\n      city: 'city',\n      company: 'company',\n      position: 'position'\n    }\n  })\n\n  const changeUser = async (newUser) => {\n    if (details.id === newUser.id)  return;\n    try {\n      const response = await fetch(`${process.env.REACT_APP_NEWS_URL}/${newUser.id}.json`);\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      const result = await response.json();\n      console.log('Details получены');\n      setDetails(result);       \n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  return (\n    <div className=\"app\">\n      <List changeUser={changeUser} />\n      <Details {...details} />\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}